mean((rnbinom(1000, size=44, mu=52)/15))
mean((rnbinom(1000, size=4.4, mu=5.2)/15))
mean((rnbinom(10000, size=44, mu=52)/15))
mean((rnbinom(10000, size=44, mu=50)/15))
mean((rnbinom(10000, size=44, mu=50)/15))
mean((rnbinom(10000, size=44, mu=50)/15))
mean((rnbinom(10000, size=40, mu=52)/15))
mean((rnbinom(10000, size=44, mu=30)/15))
mean((rnbinom(10000, size=44, mu=40)/15))
mean((rnbinom(10000, size=44, mu=42)/15))
mean((rnbinom(10000, size=44, mu=42)/60))
mean((rnbinom(10000, size=44, mu=42)))
mean((rnbinom(10000, size=4.4, mu=5.2)))
mean((rnbinom(10000, size=4.4, mu=5.2)/60))
mean((rnbinom(10000, size=44, mu=52)/60))
golem::run_dev()
golem::run_dev()
golem::run_dev()
?rtriangle
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
0.5*40
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
InfStageofInfectionvalue
metadata<-read.csv("data/metadata.csv")
save(metadata, "data/metadata.RData")
?save
save(metadata, file="data/metadata.RData")
load("~/GitHub/CEMRA/data/metadata.RData")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
CEMRA::run_model("Hospital_singlepatient", 10)
CEMRA::run_model("Hospital_singlepatient", 10)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
InfStageofInfectionvalue<-rlogis(1, 0.62, 0.16)
InfStageofInfectionvalue
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
metadata<-read.csv("data/metadata.csv")
save(metadata, file="data/metadata.RData")
golem::run_dev()
metadata<-read.csv("data/metadata.csv")
save(metadata, file="data/metadata.RData")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
save(metadata, file="data/metadata.RData")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
View(masteroutput3)
?rnbinom
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
install.packages("shinyWidgets")
install.packages("shinyWidgets")
l
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
column(1, offset=-1, img(height = 50, width = 50, src = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/32px-R_logo.svg.png"))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
3.7*2.4*3
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
library(DT)

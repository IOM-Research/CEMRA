golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
install.packages("shinyWidgets")
install.packages("shinyWidgets")
l
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
if (interactive()) {
### Uniform color background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Change shiny app background"),
setBackgroundColor("ghostwhite")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
### linear gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "linear",
direction = "bottom"
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
### radial gradient background :
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
# use a gradient in background
setBackgroundColor(
color = c("#F7FBFF", "#2171B5"),
gradient = "radial",
direction = c("top", "left")
),
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
shinyApp(ui, server)
}
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
column(1, offset=-1, img(height = 50, width = 50, src = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/32px-R_logo.svg.png"))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
3.7*2.4*3
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
if (interactive()) {
ui <- fluidPage(
checkboxInput("somevalue", "Some value", FALSE),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$somevalue })
}
shinyApp(ui, server)
}
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
library(DT)
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
print(sessionInfo())
library(DT)
print(sessionInfo())
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()
golem::run_dev()#
print(sessionInfo())
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()#
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
rlnorm(1, meanlog=1, sdlog=0.7)
rlnorm(1, meanlog=1, sdlog=0.7)
rlnorm(100, meanlog=1, sdlog=0.7)
rlnorm(100, meanlog=1, sdlog=0.7)
rlnorm(100, meanlog=1, sdlog=0.7)
rlnorm(100, meanlog=5, sdlog=0.7)
(10^rweibull(1, shape=InfsalivaChenshape, scale=InfsalivaChenscale))
(10^rweibull(1, shape=3.47, scale=7.01))
(10^rweibull(1000, shape=3.47, scale=7.01))
(rweibull(1000, shape=3.47, scale=7.01))
hist((rweibull(1000, shape=3.47, scale=7.01)))
hist((rweibull(1000, shape=3.47, scale=7.01)))
(10^rweibull(1000, shape=3.47, scale=7.01))
hist((10^rweibull(1000, shape=3.47, scale=7.01)))
rlnorm(100, meanlog=5, sdlog=0.7)
rlnorm(100, meanlog=7, sdlog=0.7)
hist(rlnorm(10000, meanlog=7, sdlog=0.7))
hist(rlnorm(10000, meanlog=7, sdlog=0.8))
hist(rlnorm(10000, meanlog=7, sdlog=0.3))
hist(rlnorm(10000, meanlog=7, sdlog=0.4))
hist(rlnorm(10000, meanlog=7, sdlog=0.5))
hist(rlnorm(10000, meanlog=7, sdlog=0.9))
hist(rlnorm(10000, meanlog=6, sdlog=0.9))
hist(rlnorm(10000, meanlog=5, sdlog=0.9))
median(rlnorm(10000, meanlog=5, sdlog=0.9))
median(rlnorm(10000, meanlog=6, sdlog=0.9))
median(rlnorm(10000, meanlog=7, sdlog=0.9))
median(rlnorm(10000, meanlog=1, sdlog=0.9))
median(rlnorm(10000, meanlog=2, sdlog=0.9))
median(rlnorm(10000, meanlog=3, sdlog=0.9))
median(rlnorm(10000, meanlog=4, sdlog=0.9))
median(rlnorm(10000, meanlog=5, sdlog=0.9))
median(rlnorm(10000, meanlog=6, sdlog=0.9))
median(rlnorm(10000, meanlog=7, sdlog=0.9))
median(rlnorm(10000, meanlog=8, sdlog=0.9))
median(rlnorm(10000, meanlog=7, sdlog=0.9))
median(rlnorm(10000, meanlog=8, sdlog=0.9))
median(rlnorm(10000, meanlog=9, sdlog=0.9))
